{"version":3,"sources":["reportWebVitals.js","components/AddTodo.jsx","nodes/AddTodo.jsx","nodes/TodoList.jsx","components/TodoList.jsx","nodes/FilterTodos.jsx","components/FilterTodos.jsx","App.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","inputRef","createNode","actions","className","type","placeholder","ref","onKeyUp","evt","keyCode","which","ADD_TODO","value","focus","onClick","node","dispatchNode","useContract","state","todos","name","isCompleted","AddTodo","message","visibilityFilter","filter","todo","length","map","i","htmlFor","id","checked","onChange","SET_VISIBIITY_FILTER","useAction","todoName","TodoList","selected","SHOW_ALL_TODOS","currentTarget","SHOW_ACTIVE_TODOS","SHOW_COMPLETED_TODOS","UPDATE_SELECTED","FilterTodos","TodoApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0cebb570.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport '../styles/AddTodo.css';\n\nlet inputRef = null;\nexport const Component = ({\n        actions\n}) => {\n        return (\n                <div className=\"add-todo-container\">\n                        <input\n                                type=\"text\"\n                                className=\"add-todo-input\"\n                                placeholder=\"What have you planned to do today ?\"\n                                ref={ref => { inputRef = ref }}\n                                onKeyUp={evt => {\n                                        if (evt.keyCode === 13 || evt.which === 13) {\n                                                actions.ADD_TODO(inputRef);\n                                                inputRef.value = \"\";\n                                                inputRef.focus();\n                                        }\n                                }}\n                        />\n                        <button\n                                className=\"add-todo-btn\"\n                                onClick={() => {\n                                        actions.ADD_TODO(inputRef);\n                                        inputRef.value = \"\";\n                                        inputRef.focus();\n                                }}\n                        >\n                                Add\n                        </button>\n                </div>\n        );\n}","import { createNode } from '@rootzjs/core';\nimport { Component } from '../components/AddTodo';\n\nconst [node, dispatchNode] = createNode(\"AddTodo\", Component);\n\nnode.useContract(\n        \"TodoList\",\n        \"ADD_TODO\",\n        (state, [inputRef]) => {\n                return {\n                        todos: [\n                                ...state.todos,\n                                {\n                                        name: inputRef.value,\n                                        isCompleted: false,\n                                }\n                        ]\n                }\n        }\n);\nexport const AddTodo = dispatchNode(node);\n","import { createNode } from '@rootzjs/core';\nimport { Component } from '../components/TodoList';\n\nconst [node, dispatchNode] = createNode(\"TodoList\", Component);\n\nnode.state({\n        todos: [],\n        visibilityFilter: \"ALL\",\n});\n\nnode.useAction(\n        \"SET_VISIBIITY_FILTER\",\n        (state, [todoName]) => {\n                const todos = state.todos.map(\n                        todo => todo.name === todoName ?\n                                { ...todo, isCompleted: !todo.isCompleted }\n                                :\n                                todo\n                );\n\n                return { todos }\n        }\n)\nexport const TodoList = dispatchNode(node);\n","import React from 'react';\nimport '../styles/TodoList.css';\n\nexport const Component = ({\n        state,\n        actions,\n}) => {\n        let todos = [];\n        let message = \"\";\n        switch (state.visibilityFilter) {\n                case \"ALL\": {\n                        todos = state.todos.filter(todo => todo);\n                        todos.length === 0 && (message = \"There are no Todos added yet\");\n                        break;\n                }\n                case \"ACTIVE\": {\n                        todos = state.todos.filter(todo => !todo.isCompleted);\n                        todos.length === 0 && (message = \"It seems, you have conquered all\");\n                        break;\n                }\n                case \"COMPLETED\": {\n                        todos = state.todos.filter(todo => todo.isCompleted);\n                        todos.length === 0 && (message = \"It seems, You haven't completed any\");\n                        break;\n                }\n                default: {\n                        todos = state.todos.filter(todo => todo);\n                }\n        }\n        return (\n                <div className=\"todo-list-container\">\n                        {\n                                todos.length > 0 ?\n                                        todos.map((todo, i) =>\n                                                <div\n                                                        key={todo.name + i}\n                                                        className=\"todos-list\"\n                                                >\n                                                        <label\n                                                                htmlFor={todo.name + i}\n                                                                className={`todo ${todo.isCompleted && \"todo-completed\"}`}\n                                                        >\n                                                                {todo.name}\n                                                                <input\n                                                                        type=\"checkbox\"\n                                                                        id={todo.name + i}\n                                                                        checked={todo.isCompleted}\n                                                                        className=\"todo-checkbox\"\n                                                                        onChange={() => actions.SET_VISIBIITY_FILTER(todo.name)}\n                                                                />\n                                                                <span className=\"checkmark\"></span>\n                                                        </label>\n\n                                                </div>\n                                        ) :\n                                        <div className=\"todo-empty-message\">{message}</div>\n                        }\n                </div>\n        );\n}","import { createNode } from '@rootzjs/core';\nimport { Component } from '../components/FilterTodos';\n\nconst [node, dispatchNode] = createNode(\"FilterTodos\", Component);\nnode.state({\n        selected: \"0\"\n});\nnode.useContract(\n        \"TodoList\",\n        \"SHOW_ALL_TODOS\",\n        (state, [actions, id]) => {\n                actions.UPDATE_SELECTED(id);\n                return {\n                        visibilityFilter: \"ALL\"\n                }\n        }\n);\nnode.useContract(\n        \"TodoList\",\n        \"SHOW_ACTIVE_TODOS\",\n        (state, [actions, id]) => {\n                actions.UPDATE_SELECTED(id);\n                return {\n                        visibilityFilter: \"ACTIVE\"\n                }\n        }\n);\nnode.useContract(\n        \"TodoList\",\n        \"SHOW_COMPLETED_TODOS\",\n        (state, [actions, id]) => {\n                actions.UPDATE_SELECTED(id);\n                return {\n                        visibilityFilter: \"COMPLETED\"\n                }\n        }\n);\nnode.useAction(\n        \"UPDATE_SELECTED\",\n        (state, [selected]) => ({ selected })\n)\n\nexport const FilterTodos = dispatchNode(node);\n","import React from 'react';\nimport '../styles/FilterTodo.css';\n\nexport const Component = ({\n        state,\n        actions\n}) => {\n        return (\n                <div className=\"filter-todo-container\">\n                        <button\n                                id=\"0\"\n                                className={state.selected === \"0\" ? \"btn-selected\" : \"\"}\n                                onClick={evt => actions.SHOW_ALL_TODOS(actions, evt.currentTarget.id)}\n                        >\n                                All\n                        </button>\n                        <button\n                                id=\"1\"\n                                className={state.selected === \"1\" ? \"btn-selected\" : \"\"}\n                                onClick={evt => actions.SHOW_ACTIVE_TODOS(actions, evt.currentTarget.id)}\n                        >\n                                Active\n                        </button>\n                        <button\n                                id=\"2\"\n                                className={state.selected === \"2\" ? \"btn-selected\" : \"\"}\n                                onClick={evt => actions.SHOW_COMPLETED_TODOS(actions, evt.currentTarget.id)}\n                        >\n                                Completed\n                        </button>\n                </div>\n        );\n}","import React from 'react';\n\n// Import Modules\nimport { AddTodo } from './nodes/AddTodo';\nimport { TodoList } from './nodes/TodoList';\nimport { FilterTodos } from './nodes/FilterTodos';\n\n// Import Styles\nimport './App.css';\n\nexport const TodoApp = () => {\n      return (\n            <div className=\"todo-root\">\n                  <div className=\"todo-container\">\n                        <AddTodo />\n                        <TodoList />\n                        <FilterTodos />\n                  </div>\n            </div>\n      );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { TodoApp } from './App';\n\n// Import Styles\nimport './index.css';\n\nReactDOM.render(\n    <TodoApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}